
npx babel src --out-dir dist



npm install --save-dev @babel/preset-react


npm update vite





npm create vite@latest

cd vite-app # Vite made a new folder named after your project
npm install
npm run dev





npm i simple-text-parser



SQL to C# and C# to SQL

    SQL Parsing:
        ANTLR (Another Tool for Language Recognition)
        TSQL ScriptDom

    C# Parsing:
        Roslyn (Microsoft's .NET Compiler Platform)

Other Language Parsing

    Java:
        JavaParser:
        ANTLR:

    C++:
        Clang/LLVM:
        ANTLR

    General:
        ANTLR: více jazyků
        Tree-sitter:

Recommendations

    Roslyn C#, ANTLR SQL a jiné jazyky, Clang C++ 

Integration in .tsx File

    .tsx file --- Interface NODE 
    You can create an API in your backend that handles the translation requests, processes the code using the chosen libraries, and returns the translated code to the frontend.

Example Architecture

    Frontend (.tsx file):
        UI for inputting code in various languages.
        API calls to the backend to request translations.

    Backend (Node.js or other):
        Endpoint to handle translation requests.
        Use Roslyn for C#, ANTLR for SQL and other languages, and Clang for C++ to parse and generate code.
        Return the translated code to the frontend.

By using robust parsing libraries and setting up a clear architecture for your app, you can efficiently handle the translation between multiple programming languages.



7.6.2024
TS AST PARSER !!!!!

JS-SQL PARSER 

GitHub pages ----> v settings, deploy z branche 


25.8.2024